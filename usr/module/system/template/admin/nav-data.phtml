<?php
    $this->css($this->assetModule('script/system-ui.css', 'system'));
    $this->jQuery('ui/jquery-ui.custom.min.js');
    $this->backbone();
?>
<style>
.root-ul .tree-edit {
    display: none;
}
.root-tree {
    width: 900px;
    padding-left: 30px;
}
.add-menu {
    margin-right: 100px;
}
.toggle-custom {
    cursor: pointer;
}
</style>
<h2 class="page-header"><?php echo $this->escape($title); ?></h2>
<div class="row" id="js-page">
    <div class="root-tree" id="js-root-tree">
        <div class="root-ul">
        </div>
        <div class="form-inline" style="margin-top:50px;">
            <?php if (!empty($readonly)) { ?>
            <button class="btn menu-submit disabled"><?php _e('View only'); ?></button>
            <?php } else { ?>
            <input type="text" placeholder="Label" class="js-label">
            <button type="submit" class="btn add-menu"><?php _e('Add to menu'); ?></button>
            <button class="btn btn-primary menu-submit"><?php _e('Save menu'); ?></button>
            <?php } ?>
        </div>
    </div>
</div>
<script type="text/template" id="tree-template">
   <div class="tree-item menu-item-depth<%= depth %>">
    <div class="tree-item-header" style="cursor: move;">
        <span class="pull-right mr10">
            <button class="close invisible">Ã—</button>
            <span class="toggle-custom">
            <span class="mr10 muted"><?php _e('Custom'); ?></span>
            <b class="caret caret-big mr10" title="<?php _e('Edit menu data') ?>"></b>
            </span>
        </span>
        <span class="tree-view"><%= label %></span>
        <input type="text" value="<%= label %>" class="tree-edit">
    </div>
    <div class="tree-item-body" style="display: none;">
        <div class="legend"><?php _e('Page link by direct URI'); ?></div>
        <div class="clearfix">
            <input type="text" value="<%= uri %>" placeholder="URL" name="uri">
        </div>
        <div class="legend"><?php _e('Page link by route'); ?></div>
        <div class="clearfix">
            <input type="text" value="<%= route %>" class="input-small" placeholder="Route" name="route">
            <input type="text" value="<%= module %>" class="input-small" placeholder="Module" name="module">
            <input type="text" value="<%= controller %>" class="input-small" placeholder="Controller" name="controller">
            <input type="text" value="<%= action %>" class="input-small" placeholder="Action" name="action">
        </div>
        <div class="legend"><?php _e('Other params'); ?></div>
        <div class="clearfix">
                        <input type="text" value="<%= label %>" class="span2" placeholder="Label" name="label">
                        <select class="span2" name="target">
                            <option value="" <% if (!target) { %>selected<% } %>><?php _e('None'); ?>
                            <option value="_blank" <% if (target == "_blank") { %>selected<% } %>><?php _e('Open in a new window'); ?>
                        </select>
                <input type="text" value="" class="span2" placeholder="Permission resource" name="resource">
                <label class="checkbox"><input type="checkbox" name="visible" <% if (visible) { %>checked<% } %>><?php _e('To display in menu.'); ?></label>
        </div>
        <?php if (!empty($readonly)) { ?>
        <div>
            <span class="label label-important" style="cursor: pointer;"><?php _e('Save'); ?></span>
            <span class="divider">|</span>
            <span class="link cancel"><?php _e('Cancel'); ?></span>
        </div>
        <?php } ?>
    </div>
    <div class="menu-item-transport">
    </div>
    </div>
</script>
<script>

(function($) {
/* help fn */
var data1 = <?php echo json_encode($pages) ?> ,
    root = $("#js-root-tree"),
    getChild = function(el) {
        /*it is so difficulty*/
        var loop = function(el) {
            var model = getM(el),
                ch = trees.where({
                    pid: model.get("id")
                });
            for (var i = 0, l = ch.length; i < l; i++) {
                loop1(root.find("[data-cid=" + ch[i].cid + "]"));
            }
        },
        loop1 = function(el) {
            var model = getM(el),
                ch = trees.where({
                    pid: model.get("id")
                });
            els[index++] = el[0];
            for (var i = 0, l = ch.length; i < l; i++) {
                loop1(root.find("[data-cid=" + ch[i].cid + "]"));
            }
        },
        els = $(""),
            index = 0;
        loop(el);
        els.length = index;
        return els;
    },
    getM = function(el) {
        return trees.getByCid(el.attr("data-cid"));
    };
/*model*/
var Tree = Backbone.Model.extend({
    idAttribute: "_id",
    defaults: {
        id: 0,
        depth: 0,
        pid: 0,
        label: "",
        resource: "",
        uri: "",
        target: "",
        route: "",
        module: "",
        controller: "",
        action: "",
        visible: 0
    },
    initialize: function() {},
    validate: function(attrs) {
        if (!attrs.label) {
            return "<?php _e('Label can not be empty'); ?>";
        }
    }
});
/*Collection*/
var TreeCollection = Backbone.Collection.extend({
    model: Tree,
    initialize: function() {}
});
var trees = new TreeCollection(data1);
/*view*/
var TreeListItemView = Backbone.View.extend({
    template: _.template($('#tree-template').html()),
    events: {
        "click .toggle-custom": "toggleInfo",
        "click .cancel": "toggleInfo",
        "click .label-important": "saveInfo",
        "click .close": "clear"
    },
    initialize: function() {
        this.$el.attr({
            "data-cid": this.model.cid
        });
        this.model.on("error", this.fail, this);
        this.model.on("change:depth", this.render, this);
        this.model.on("destroy", this.remove, this);
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    toggleInfo: function() {
        this.$el.toggleClass("editing");
        this.$(".tree-item-body").slideToggle(400);
    },
    saveInfo: function() {
        var $ = this.$.bind(this),
            model = this.model,
            fn = function(flag) {
                model.set({
                    "uri": $("input[name=uri]").val(),
                    "route": $("input[name=route]").val(),
                    "module": $("input[name=module]").val(),
                    "controller": $("input[name=controller]").val(),
                    "action": $("input[name=action]").val(),
                    "label": $("input[name=label]").val(),
                    "visible": $("input[name=visible]").attr("checked") ? 1 : 0,
                    "resource": $("input[name=resource]").val(),
                    "target": $("select[name=target]").val()
                }, {
                    silent: flag
                });
            };
        fn(true);
        if (model.isValid()) {
            this.toggleInfo();
            if (model.hasChanged("label")) {
                setTimeout(function() {
                    this.render();
                }.bind(this), 400);
            }
        } else {
            fn(false);
        }
    },
    fail: function(model, error) {
        alert(error);
    },
    clear: function() {
        var c = getChild(this.$el);
        if (c.length) {
            if (confirm("<?php _e("Delete this node will delete all of this sub links"); ?>")) {
                this.model.destroy();
                c.each(function() {
                    getM($(this)).destroy();
                });
            }
        } else {
            this.model.destroy();
        }
    }
});

var TreeListView = Backbone.View.extend({
    el: $("#js-root-tree"),
    events: {
        "click .add-menu": "create",
        "click .menu-submit": "saveMenu"
    },
    initialize: function() {
        trees.on("add", this.addOne, this);
        this.root = this.$(".root-ul");
        this.render();
        this.initSortables();
    },
    initSortables: function() {
        var self = this,
            $ = self.$.bind(self),
            getDepth = function(el) {
                return getM(el).get("depth");
            },
            hasChild = function(el) {
                return trees.where({
                    pid: getM(el).get("id")
                }).length;
            },
            MaxDepth = function(els) {
                var max = 0;
                els.each(function() {
                    max = Math.max(max, $(this).find(">")[0].className.replace(/^.*menu-item-depth(\d).*$/, "$1"));
                });
                return max;
            };
        this.root.sortable({
            revert: 300,
            delay: 100,
            handle: ".tree-item-header",
            placeholder: "tree-sortable-placeholder",
            start: function(e, ui) {
                var c = getChild(ui.item),
                    l = c.length,
                    w = ui.item.find(".tree-item-header").outerWidth() + MaxDepth(c) * 30,
                    h = (ui.item.outerHeight() + 10) * (l + 1) - 12;
                ui.placeholder.css({
                    "width": w,
                    "height": h
                });
                ui.item.find(".menu-item-transport").append(c);
                self.root.sortable("refresh");
            },
            stop: function(e, ui) {
                var it = ui.item,
                    child = getChild(it),
                    p = ui.placeholder,
                    m = getM(it),
                    d = parseInt(p.attr("class").replace(/^.*menu-item-depth(\d).*$/, "$1")),
                    diff = d - m.get("depth"),
                    pid;
                if (d == 0) {
                    pid = 0;
                } else {
                    it.prevAll().each(function() {
                        var m = getM($(this));
                        if (m.get("depth") == d - 1) {
                            pid = m.get("id")
                            return false;
                        }
                    });
                };
                if (child.length) {
                    child.insertAfter(it).each(function() {
                        var m = getM($(this));
                        m.set({
                            depth: m.get("depth") + diff,
                        });
                    });
                }
                m.set({
                    depth: d,
                    pid: pid
                });
            },
            sort: function(e, ui) {
                var p = ui.placeholder,
                    it = ui.item,
                    before = p.prev();
                if (before[0] == it[0]) {
                    before = before.prev();
                }
                if (!before.length) {
                    p[0].className = "tree-sortable-placeholder menu-item-depth0";
                    return;
                };
                var depth = getDepth(before),
                    left1 = parseInt(before.offset().left) + depth * 30,
                    left2 = ui.offset.left + getDepth(it) * 30,
                    diff = left2 - left1;
                if (diff > 30) {
                    p[0].className = "tree-sortable-placeholder menu-item-depth" + (depth + 1);
                } else if (diff >= 0 && !hasChild(before)) {
                    p[0].className = "tree-sortable-placeholder menu-item-depth" + depth;
                } else {
                    var mul = depth - Math.ceil(Math.abs(diff / 30)),
                        nt = p.next(),
                        ntd;
                    if (nt.length) {
                        ntd = getDepth(nt);
                        mul = mul < ntd ? ntd : mul;
                    }
                    p[0].className = "tree-sortable-placeholder menu-item-depth" + mul;
                }
            }
        });
    },
    render: function() {
        var ms = trees.models,
            root = this.root;
        for (var i = 0, l = ms.length; i < l; i++) {
            root.append(new TreeListItemView({
                model: ms[i]
            }).render().el);
        }
    },
    create: function() {
        var input = this.$(".js-label"),
            val = $.trim(input.val());
        if (val) {
            trees.add({
                id: (new Date).getTime(),
                label: val
            });
        }
        input.val("");
    },
    addOne: function(tree) {
        this.root.append(new TreeListItemView({
            model: tree
        }).render().el);
    },
    saveMenu: function() {
        var vs = this.root.find(">"),
            ret = [];
        vs.each(function() {
            ret.push(trees.getByCid($(this).attr("data-cid")).attributes);
        });
        console.log(ret);
        $.post("<?php echo $this->url('', array('action' => 'update')); ?>", {
            name: "<?php echo $navigation; ?>",
            pages: ret
        }).done(function(result) {
            result = $.parseJSON(result);
            if (result.status == 1) {
                alert(result.message);
            }
        });
    }
});
/*App run*/
new TreeListView;
})(jQuery)

</script>